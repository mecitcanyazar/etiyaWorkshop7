!! UNDEFINED & NULL !!

Undefined ; değişken bildirilmiş ama henüz değeri atanmamış demektir.Kısacası undefined, o şeyin hiçbir fikrinin olmadığı yerdir; türü yok ve bu kapsamda daha önce hiç referans alınmadığı,
“değer yok” anlamına gelir.
Başlatılmamış değişkenler, eksik parametreler ve bilinmeyen değişkenler bu değere sahiptir.

<script>
	var testDegiskeni;
	alert(testDegiskeni); // undefined
	alert(typeof testDegiskeni); //undefined
</script>


Null ; varlığın bilindiği yer, ancak değerin ne olduğu bilinmemektedir. Boş değer anlamına gelen özel bir değerdir. Typeof null bize nesne döndürür.

<script>
	var testDegiskeni = null;
	alert(testDegiskeni); //null
	alert(typeof testDegiskeni); //object
</script



Atanmamış değişkenlerin değeri javascript tarafında otomatik olarak undefined olarak atanır.Javascript asla null değeri atamaz. Eğer bir elemanın değeri null ise bu javascript tarafından
değil, program tarafından atanmış demektir.

!! HTTP REQUEST !!

Sunucudan bir takım verileri , listeleri çekip göstermek istediğimizde, veya bir kayıt oluşturma, bir sipariş verme, Tamam düğmesine bastığımızda kullanılan iletişim yöntemidir.

İki kısımdan oluşur, Request(istek) ve bunun Response (Cevap)'tan oluşur.
Request içerisinde Method, Path, Version Control ve Header kısmından oluşur. Metodları incelersek;
	
GET metodu belirtilen kaynağın bir temsilini ister. GET kullanan istekler yalnızca veri almalıdır.
POST metodu belirtilen kaynağa bir varlık (entity) göndermek için kullanılır, bu da genellikle sunucuda bir durum değişikliği ya da yan etkilere neden olur.
PUT metodu hedefte bulunan kaynağın tüm geçerli temsillerinin yerine istek yükünü (request payload) koyar.
DELETE metodu belirtilen kaynağı siler.
PATCH metodu bir kaynağa kısmi değişiklikler uygulamak için kullanılır.
TRACE metodu hedefteki kaynağa giden yol boyunca bir mesaj loop-back testi gerçekleştirir.
HEAD metodu GET isteği ile tamamen aynı olan sadece gövdesi olmayan bir yanıt ister.
OPTIONS metodu hedefteki kaynağın iletişim seçeneklerini anlamak için kullanılır. (CORS olduğunda diğer domain o fiil var mı şeklinde sorar)
CONNECT metodu hedefteki kaynak tarafından tanımlanan sunucuya bir tünel oluşturur.

Reponse içerisinde gelen Status Code bakarsak;

1xx: Tarayıcı tarafından gönderilen isteğin sunucuya ulaştığını ve işlemin başladığını bildiren bilgilendirme kodlarını ifade eden durum kodlarıdır.
2xx: Tarayıcı tarafından gönderilen isteğin sunucuya ulaştığını, anlaşıldığını ve başarılı olduğunu ifade eden durum kodlarıdır.
3xx: Erişilmek istenen kaynağın başka bir kaynağa taşındığını ve bir yönlendirmenin söz konusu olduğunu ifade eden durum kodlarıdır.
4xx: İsteğin yerine getirilemediğini, ilgili web sayfasına ya da web sitesine ulaşılamadığını ifade eden durum kodlarıdır.
5xx: Tarayıcı tarafından gönderilen isteğin başarıyla sunucuya ulaştığını fakat sunucu tarafındaki sorunlar nedeniyle isteğin yerine getirilemediğini ifade eden durum kodlarıdır.

- En Sık Karşılaşılan Durum Kodları

200 Durum Kodu (Başarılı) => Bir web sayfası sorunsuz şekilde açılıyorsa sunucudan tarayıcıya 200 durum kodu gönderilir. Sunucudan tarayıcıya 200 durum kodu iletiliyorsa ziyaretçi ve web 
sitesi için her şey olması gerektiği gibidir diyebiliriz.

301 Durum Kodu (Kalıcı Yönlendirme) => Bir web sayfasının kalıcı olarak bir başka web sayfasına yönlendirildiği ve sayfayı ziyaret eden kullanıcınında otomatik olarak yönlenmesini sağlayan 
durum kodudur.

302 Durum Kodu (Geçici Yönlendirme) => Bir web sayfasının geçici olarak bir başka web sayfasına yönlendirildiğini ifade eden durum kodudur. 301 yönlendirme kodundan farkı ilgili sayfanın 
test aşamasında olması, bakıma alınması ya da bir e-ticaret sitesi için ilgili ürünün stoklarının geçici olarak tükenmesi gibi ilgili sayfanın tekrar aktif edileceği durumlarda kullanılmasıdır.
Fakat kullanıcılar 301 yönlendirmesi ile 302 yönlendirmesi arasındaki farkı anlamayacaktır. İlgili sayfaya giriş yapan kullanıcılar direkt olarak diğer sayfaya yönlendirilecektir.

403 Durum Kodu (Erişim İzni Sorunu) => Kullanıcının bir web sayfasına erişmek adına sunucuya gönderdiği isteğe karşılık ilgili web sayfasına erişim izni olmadığı ya da ilgili web sayfasının
yasaklandığını ifade eden durum kodudur.

404 Durum Kodu (Bulunamadı) => Kullanıcının görüntülemek istediği web sayfasının ilgili sunucuda bulunmadığını ifade eden durum kodudur.İlgili web sayfası silinmiş ya da URL’si 
değiştirilmiş olabilir.

410 Durum Kodu (Kalıcı Olarak Bulunmuyor) => Kullanıcının erişmek istediği web sayfasının sunucuda bulunmadığını ifade eden durum kodudur. 404 durum kodundan farkı ilgili web sayfasının 
kesin ve kalıcı olarak silindiğini ve geri gelmeyeceğini ifade etmektedir.

500 Durum Kodu (Sunucu Hatası) => Sunucu kaynaklı problemlerde karşılaşılan durum kodudur. Sunucuda bir şeylerin ters gittiğini ifade etmektedir. 

503 Durum Kodu (Sunucu Kullanılamıyor) => Sunucu tarafında geçici bir sorun olduğunu ifade eden durum kodudur. Genelde sunucuların bakımda olduğu ya da aşırı yüklenme sonucu geçici olarak
devre dışı kaldığı durumlarda karşılaşılır.

!! INTERFACE !!

JS,type-safe bazlı bir dil değildir. Dolayısıyla type-safe bir yapı oluşturmak, doğası gereği zor. TypeScript’de ki interface’ler temel olarak bu zorluğu ortadan kaldırmak için 
geliştirilmiş diyebiliriz.

TypeScript’deki interface, temelinde bir tip tanımından başka birşey değildir. class ve function‘lar nesnelerin davranışlarını tanımlarken, interface‘ler nesnelerin tiplerini tanımlar 
şeklinde düşünebiliriz.

interface IShape {
getPerimeter(): number;
}

Şimdi bu interface’den yaratacağımız Square sınıfımıza bir bakalım. “implements” anahtar kelimesi ile sınıfımızın IShape interface’inden oluşacağını belirtiyoruz.Aslında burada Square 
sınıfımızın tipi IShape arayüzü ile tanımlı olacaktır da demiş oluyoruz.

class Square implements IShape {
 
}


Bu noktada Visual Studio’nun verdiği bir uyarının altını çizmek isterim. Yukarıdaki gibi bir ifadede, Visual Studio, Square sınıfının getPerimeter() fonkisyonunun implement edilmediğini 
söyleyerek hata verecektir. TypeScript’deki interface kavramının en güzel yanı aslında bu. Javascript’de tiplerin genişletilebilirliğini yönetmek zor olduğundan, çok fazla hata yapmak 
mümkün olabiliyordu.Ancak TypeScript’in bu özelliği ile genişletilebilirlik özelliği tamamen bizim kontrolümüze geçmiş oluyor.

Yavaştan Square sınıfımızı biraz daha anlamlı hale getirmeye başlıyalım ve interface’mizin getPerimeter() fonkisyonunu kare için tanımlayalım.
class Square implements IShape {
    private length: number;
    constructor(l: number)
    {
        length = l;
    }
    getPerimeter(): number {
        return length * 4;
    }
    
}

Compile ettiğimiz zaman, aşağıdaki gibi bir javascript kodunu elde edeceğiz. Dikkat ederseniz, IShape’e dair herhangi bir tanım, herhangi bir ifade yok.

var Square = (function () {
    function Square(l) {
        length = l;
    }
    Square.prototype.getPerimeter = function () {
        return length * 4;
    };
    return Square;
})();
 
window.onload = function () {
    var s = new Square(4);
    console.log(s.getPerimeter());
};


Interfaces’da, ? kullanarak değerin kullanımını isteğe bağlı olduğunu belirtebilirsiniz veya undefined ekleyerek de bu özelliği kullanabilirsiniz.

interface Course {
  title: string;
  description: string;
  createdAt: Date;
  updatedAt: Date;
  price?: number; //Optional
  currency: string | undefined; //Optional
  isActive: boolean;
}

Bu örnekte artık fiyat ve para birimi olmadan bir object oluşturabileceğiniz anlamına gelir:



!! CLASS & oBJECT !!

Nesne yönelimli programlamada, class (sınıf) bir özellik ve yöntem koleksiyonunu tanımlayan bir yapıdır.
Nesneler ise bir sınıfın örnekleridir.Sınıfın tanımladığı ortak yapıyı paylaşırlar.

                                                                            Karşılaştırma Tablosu

	                        Sınıf	                                                                                        Nesne

Tanım	                        Sınıf, tek bir birimdeki veri bağlama üyelerinin ve ilişkili yöntemlerin mekanizmasıdır.	Sınıf örneği veya sınıf değişkeni.

varoluş            	        Bu mantıklı bir varlıktır	                                                                Bu fiziksel varlıktır

Hafıza Tahsisi	                Hafıza alanı oluşturulduğunda tahsis edilmez.	                                                Hafıza alanı oluşturulduğunda tahsis edilir.

Bildirimi / tanımlanması	Tanım bir kez yaratılır.	                                                                İstediğiniz kadar çok zaman yaratılır.

!! IoC !!

IoC(Inversion Of Control),uygulamanın yaşam döngüsü boyunca birbirine bağımlılığı az olan nesneler oluşturmayı amaçlayan bir yazılım geliştirme prensibidir.
IoC kullanan sınıfa bir interface inject edildiğinde, ilgili interface metotları kullanılabilir olur. Böylece IoC kullanan sınıf sadece kullanacağı metotları bilir, sınıf içerisinde daha 
fazla metot olsa bile interface’de belirtilen metotlara erişebilecektir.

Sınıf içerisinde yapılacak herhangi bir değişiklikte IoC kullanan sınıf etkilenmeyeceği için yeniden yazılabilir ve test edilebilir yazılım geliştirmemizi sağlar. IoC nesne bağlamalar 
genellikle uygulama başlangıcında yapılandırılmaktadır. Bu anlamda tek bir yerden yapılan IoC yapılandırmalarının değiştirilmesi ve yönetimi de oldukça kolaydır.

IoC kullanmanın avantajlarını şöyle sıralayabiliriz:
* Loosely coupled (bağımlılığı az) sınıflar oluşturma
* Kolay unit test yazma
* Yönetilebilirlik
* Modüler programlar
* Farklı implementasyonlar arası kolay geçiş.

!! DEPENDENCY INJECTION

Dependency injection kaba tabir ile bir sınıfın/nesnenin bağımlılıklardan kurtulmasını amaçlayan ve o nesneyi olabildiğince bağımsızlaştıran bir programlama tekniği/prensibidir.
Dependency Injection uygulayarak; bir sınıfının bağımlı olduğu nesneden bağımsız hareket edebilmesini sağlayabilir ve kod üzerinde olası geliştirmelere karşın değişiklik yapma ihtiyacını 
ortadan kaldırabiliriz.

export class CategoryListComponent implements OnInit {

ngOnInit(): void {

  }

 constructor(private activatedRoute: ActivatedRoute)
    
}

Yukarıdaki örnekte CategoryListComponent class'ı OnInit implementasyonuyla ordaki özellikleri de enjekte ediyor ve OnInit class'ının interface yapısı da onunla birlikte geliyor.
Daha sonra constructor injection yoluyla activated route'un özelliklerini angular bizim için IoC'den getiriyor ve biz de bunu activatedRoute adlı değişken içinde saklıyoruz.Artık somut bir
sınıf ActivatedRoute yerine soyut bir sınıfı (activatedRoute) asıl kullanmak istediğimiz yapı yerine kullanabiliyoruz.
Çünkü var olan kod bloğunda herhangi bir değişiklik yapacağımız zaman sadece yeni tanımladığımız activatedRoute özelliği değişecek ve bu sayede IoC container içindeki ActivatedRoute class'ı
bu değişikliklerden etkilenmeyecek ve ana yapısı bozulmamış olacak.İşte bu işleme Dependency Injection diyoruz.
Artık CategoryListComponent class'ı doğrudan ActivatedRoute class'ına bağımlı değil.



































